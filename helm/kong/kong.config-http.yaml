# Basic configuration for Kong without the ingress controller, using the Postgres subchart
# This installation does not create an Ingress or LoadBalancer Service for
# the Admin API. It requires port-forwards to access without further
# configuration to add them, e.g.:
# kubectl port-forward deploy/your-deployment-kong 8001:8001

image:
  repository: kong
  tag: "3.0"

env:
  admin_api_uri: http://kong.allanserrav.com/api
  admin_gui_host: kong.allanserrav.com
  admin_gui_protocol: http
  admin_gui_url: http://kong.allanserrav.com
  database: postgres
  password:
    valueFrom:
      secretKeyRef:
        key: kong_admin_password
        name: kong-config-secret
  pg_database: kong
  pg_host:
    valueFrom:
      secretKeyRef:
        key: pg_host
        name: kong-config-secret
  pg_password:
    valueFrom:
      secretKeyRef:
        key: pg_password
        name: kong-config-secret
  pg_ssl: "off"
  pg_ssl_verify: "off"
  pg_user: postgres
  portal: true
  portal_api_url: http://developer.allanserrav.com/api
  portal_auth: basic-auth
  portal_cors_origins: '*'
  portal_gui_host: developer.allanserrav.com
  portal_gui_protocol: http
  portal_gui_url: http://developer.allanserrav.com/
  portal_session_conf:
    valueFrom:
      secretKeyRef:
        key: portal_session_conf
        name: kong-config-secret
  status_listen: 0.0.0.0:8100

postgresql:
  enabled: false

migrations:
  enabled: true
  postUpgrade: true
  preUpgrade: true

enterprise:
  enabled: true
  license_secret: kong-enterprise-license
  portal:
    enabled: true
  rbac:
    # admin_api_auth: basic-auth
    # admin_gui_auth_conf_secret: kong-config-secret
    enabled: false
    # session_conf_secret: kong-config-secret
  smtp:
    enabled: false
  vitals:
    enabled: false

admin:
  enabled: true
  annotations:
    konghq.com/protocol: http
  http:
    containerPort: 8001
    enabled: true
    servicePort: 8001
  tls:
    enabled: false
  ingress:
    enabled: true
    annotations:
      konghq.com/protocols: http
      konghq.com/strip-path: "true"
      kubernetes.io/ingress.class: default
      nginx.ingress.kubernetes.io/app-root: /
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
      nginx.ingress.kubernetes.io/permanent-redirect-code: "301"
    hostname: kong.allanserrav.com
    path: /api
  type: ClusterIP

manager:
  enabled: true
  annotations:
    konghq.com/protocol: http
  http:
    containerPort: 8002
    enabled: true
    servicePort: 8002
  tls:
    enabled: false
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: default
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
    hostname: kong.allanserrav.com
    path: /
  type: ClusterIP

portal:
  enabled: true
  annotations:
    konghq.com/protocol: http
  http:
    containerPort: 8003
    enabled: true
    servicePort: 8003
  tls:
    enabled: false
  ingress:
    enabled: true
    annotations:
      konghq.com/protocols: http
      konghq.com/strip-path: "false"
      kubernetes.io/ingress.class: default
    hostname: developer.allanserrav.com
    path: /
  type: ClusterIP

portalapi:
  enabled: true
  annotations:
    konghq.com/protocol: http
  http:
    enabled: true
  tls:
    enabled: false
  ingress:
    enabled: true
    annotations:
      konghq.com/protocols: http
      konghq.com/strip-path: "true"
      kubernetes.io/ingress.class: default
      nginx.ingress.kubernetes.io/app-root: /
    hostname: developer.allanserrav.com
    path: /api
  type: ClusterIP

status:
  enabled: true
  http:
    containerPort: 8100
    enabled: true
  tls:
    enabled: false

ingressController:
  enabled: true # necess√°rio para o funcionamento do ingress
  env:
    kong_admin_filter_tag: ingress_controller_default
    kong_admin_tls_skip_verify: true
    kong_admin_token:
      valueFrom:
        secretKeyRef:
          key: password
          name: kong-config-secret
    kong_admin_url: http://localhost:8001
    kong_workspace: default
    publish_service: kong/api-kong-proxy
  image:
    repository: docker.io/kong/kubernetes-ingress-controller
    tag: "2.7"
  ingressClass: default
  installCRDs: false

proxy:
  # Enable creating a Kubernetes service for the proxy
  enabled: true
  http:
    containerPort: 8080
    enabled: true
    hostPort: 80
  tls:
    enabled: false
  labels:
    enable-metrics: true
  type: NodePort

replicaCount: 1

secretVolumes: []

updateStrategy:
  rollingUpdate:
    maxSurge: 100%
    maxUnavailable: 100%
  type: RollingUpdate